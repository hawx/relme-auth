<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>relme-auth</title>
    <style>
      /* http://meyerweb.com/eric/tools/css/reset/
         v2.0 | 20110126
         License: none (public domain)
       */

      html, body, div, span, applet, object, iframe,
      h1, h2, h3, h4, h5, h6, p, blockquote, pre,
      a, abbr, acronym, address, big, cite, code,
      del, dfn, em, img, ins, kbd, q, s, samp,
      small, strike, strong, sub, sup, tt, var,
      b, u, i, center,
      dl, dt, dd, ol, ul, li,
      fieldset, form, label, legend,
      table, caption, tbody, tfoot, thead, tr, th, td,
      article, aside, canvas, details, embed,
      figure, figcaption, footer, header, hgroup,
      menu, nav, output, ruby, section, summary,
      time, mark, audio, video {
	      margin: 0;
	      padding: 0;
	      border: 0;
	      font-size: 100%;
	      font: inherit;
	      vertical-align: baseline;
      }
      /* HTML5 display-role reset for older browsers */
      article, aside, details, figcaption, figure,
      footer, header, hgroup, menu, nav, section {
	      display: block;
      }
      body {
	      line-height: 1;
      }
      ol, ul {
	      list-style: none;
      }
      blockquote, q {
	      quotes: none;
      }
      blockquote:before, blockquote:after,
      q:before, q:after {
	      content: '';
	      content: none;
      }
      table {
	      border-collapse: collapse;
	      border-spacing: 0;
      }

      html, body {
        height: 100%;
      }

      body {
        font: 1em/1.3 Verdana, Geneva, sans-serif;
        display: flex;
        flex-direction: column;
      }

      .container {
        max-width: 35rem;
        margin: 0 auto 4rem;
      }

      header {
        border-bottom: 1px solid #ccc;
        margin: 1.3rem 0;
        padding: 1.3rem 0;
      }

      h1 {
        font-size: 1.5rem;
        font-weight: bold;
      }

      h2 {
        font-size: 1.2rem;
        color: #666;
      }

      ul.methods {
        padding-left: 1rem;
      }

      ul.methods li {
        margin: 1.3rem 0;
      }

      li.error, li.unsupported {
        color: silver;
      }

      strong {
        font-weight: bold;
      }

      .error-msg {
        margin: 1.3rem 0;
        padding: .6rem 1rem;
        border-radius: .2rem;
        background: rgba(255, 59, 93, .1);
      }

      a {
        color: rgb(54, 93, 169);
        text-decoration: none;
        border-bottom: 1px solid rgb(54, 93, 169);
      }

      a:hover {
        color: rgb(42, 100, 151);
        border-color: rgb(42, 100, 151);
      }

      a.btn {
        border: 1px solid;
        padding: .3rem .5rem;
        border-radius: .2rem;
        background: rgba(54, 93, 169, .1);
        border-color: rgba(54, 93, 169, .2);
      }

      a.btn:hover {
        background: rgba(42, 100, 151, .1);
        border-color: rgba(42, 100, 151, .5);
      }

      footer {
        margin: 2.6rem 0;
        font-size: .7rem;
        color: #666;
      }

      footer a {
        color: #666;
        border: none;
        text-decoration: underline;
      }

      footer a:hover {
        color: black;
      }

      .fill {
        flex: 1;
      }

      .container + .fill {
        flex: 3;
      }

      .info {
        font-style: italic;
        margin: 2.6rem 0;
      }

      .info.loading {
        display: none;
      }

      /* https://projects.lukehaas.me/css-loaders/ */
      .loader,
      .loader:before,
      .loader:after {
        border-radius: 50%;
        width: 2.5em;
        height: 2.5em;
        -webkit-animation-fill-mode: both;
        animation-fill-mode: both;
        -webkit-animation: load7 1.8s infinite ease-in-out;
        animation: load7 1.8s infinite ease-in-out;
      }
      .loader {
        color: #666666;
        font-size: 10px;
        margin: 80px auto;
        position: relative;
        text-indent: -9999em;
        -webkit-transform: translateZ(0);
        -ms-transform: translateZ(0);
        transform: translateZ(0);
        -webkit-animation-delay: -0.16s;
        animation-delay: -0.16s;
      }
      .loader:before,
      .loader:after {
        content: '';
        position: absolute;
        top: 0;
      }
      .loader:before {
        left: -3.5em;
        -webkit-animation-delay: -0.32s;
        animation-delay: -0.32s;
      }
      .loader:after {
        left: 3.5em;
      }
      @-webkit-keyframes load7 {
        0%,
        80%,
        100% {
          box-shadow: 0 2.5em 0 -1.3em;
        }
        40% {
          box-shadow: 0 2.5em 0 0;
        }
      }
      @keyframes load7 {
        0%,
        80%,
        100% {
          box-shadow: 0 2.5em 0 -1.3em;
        }
        40% {
          box-shadow: 0 2.5em 0 0;
        }
      }
      .loader.hide {
        display: none;
      }
    </style>
  </head>
  <body>
    <div class="fill"></div>

    <div class="container">
      <header>
        <h1>Sign-in to {{ .ClientName }}</h1>
        <h2>{{ .ClientID }}</h2>
      </header>

      <p>Use one of the methods below to sign-in as <strong>{{ .Me }}</strong></p>

      <ul class="methods"></ul>
      <div class="loader"></div>

      <p class="info loading">
        Results cached <span class="cachedAt"></span>. <a id="refresh">Refresh</a>.
      </p>

      <footer>
        This is <a href="https://github.com/hawx/relme-auth">relme-auth</a>, an app that allows you to sign-in to websites by delegating to authentication providers using <code>rel=me</code> links
        on your homepage and other sites. <a href="https://indieauth.com/setup">Learn more</a>.
      </footer>
    </div>

    <div class="fill"></div>

    <script>
      const urlParams = new URLSearchParams(window.location.search);

      const methods = document.querySelector('.methods');
      const info = document.querySelector('.info');
      const cachedAt = document.querySelector('.cachedAt');
      const refresh = document.getElementById('refresh');
      const loader = document.querySelector('.loader');

      var socket = new WebSocket("{{ .WebSocketURL }}");
      socket.onopen = function (event) {
        socket.send(JSON.stringify({
          me: urlParams.get('me'),
          clientID: urlParams.get('client_id'),
          redirectURI: urlParams.get('redirect_uri'),
          force: false,
        }));
      };

      refresh.onclick = function() {
        while (methods.firstChild) {
          methods.removeChild(methods.firstChild);
        }
        info.classList.add('loading');
        loader.classList.remove('hide');

        socket.send(JSON.stringify({
          me: urlParams.get('me'),
          clientID: urlParams.get('client_id'),
          redirectURI: urlParams.get('redirect_uri'),
          force: true,
        }));
      };

      const elements = {};
      let anyVerified = false;

      socket.onmessage = function (event) {
        const profile = JSON.parse(event.data);

        if (profile.Type) {
          switch (profile.Type) {
            case 'error':
              if (profile.Link === '') {
                showError(methods);
                return;
              } else {
                toError(elements[profile.Link], 'error');
              }
              break;
            case 'found':
              elements[profile.Link] = renderText(methods, profile.Link);
              break;
            case 'not-supported':
              toError(elements[profile.Link], 'unsupported');
              break;
            case 'unverified':
              methods.removeChild(elements[profile.Link]);
              break;
            case 'verified':
              elements[profile.Link] = toMethod(elements[profile.Link], profile.Method);
              anyVerified = true;
              break;
            case 'done':
              loader.classList.add('hide');
              if (!anyVerified) {
                const errorText = document.createTextNode("Sorry, you aren't able to use any of the supported authentication providers.");
                methods.classList.add('info');
                methods.appendChild(errorText);
              }
              break;
          }
        } else {
          loader.classList.add('hide');

          cachedAt.textContent = profile.CachedAt;
          info.classList.remove('loading');

          for (const method of profile.Methods) {
            renderMethod(methods, method);
          }
        }
      }

      function showError(root) {
        const p = document.createElement('p');
        const text = document.createTextNode('Something went wrong while trying to retrieve possible authentication methods.');

        p.appendChild(text);
        p.classList.add('error-msg');
        root.appendChild(p);
        loader.classList.add('hide');
      }

      function renderMethod(root, method) {
        const li = document.createElement('li');

        const btn = document.createElement('a');
        btn.classList.add('btn');
        btn.href = '/auth/start?' + method.Query;

        const name = document.createElement('strong');
        name.textContent = method.StrategyName;

        const asText = document.createTextNode(' as ' + method.ProfileURL);

        btn.appendChild(name);
        btn.appendChild(asText);
        li.appendChild(btn);
        root.appendChild(li);
        return li;
      }

      function renderText(root, link) {
        const li = document.createElement('li');
        const text = document.createTextNode(link);

        li.appendChild(text);
        root.appendChild(li);
        return li;
      }

      function toError(li, errorClass) {
        const errorText = errorClass === 'unsupported'
                        ? document.createTextNode(' is not supported for authentication')
                        : document.createTextNode(' could not be retrieved');

        li.classList.add(errorClass);
        li.appendChild(errorText);
      }

      function toMethod(li, method) {
        while (li.firstChild) {
          li.removeChild(li.firstChild);
        }

        const btn = document.createElement('a');
        btn.classList.add('btn');
        btn.href = '/auth/start?' + method.Query;

        const name = document.createElement('strong');
        name.textContent = method.StrategyName;

        const asText = document.createTextNode(' as ' + method.ProfileURL);

        btn.appendChild(name);
        btn.appendChild(asText);
        li.appendChild(btn);
        return li;
      }
    </script>
  </body>
</html>
